var expect = require('chai').expect;
var utils = require('./utils');

var Promise = require('bluebird');

/*
  beforeEach(function() {
    client = new redis();
    return client.flushdb().then(function() {
      queue = utils.buildQueue('test rate limiter', {
        limiter: {
          max: 1,
          duration: 1000
        }
      });
      return queue;
    });
  });

  afterEach(function() {
    return queue.close().then(function() {
      return client.quit();
    });
  });
*/

describe.skip('queue close', function() {
  it('should not stack BRPOPLPUSH commands when closing', function() {
    this.timeout(10000);
    var queue = utils.buildQueue('test close queue');
    var counter = 0;

    queue.process(10, function() {
      counter++;
    });

    return new Promise(function(resolve) {
      queue.on('completed', function() {
        expect(counter).to.be.equal(1);
        resolve(Promise.delay(1000).then(function() {
          return queue.close().then(function(){
            expect(queue.bclient.commandQueue.length).to.be.eql(0);
            console.error(queue.bclient.commandQueue, queue.bclient.offlineQueue);
          })
        }));
      });

      Promise.delay(1000).then(function() {
        queue.add({});
      });
    }).then(function() {
      return Promise.delay(1000);
    });
  });
});
